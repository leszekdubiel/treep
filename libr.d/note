
# Note is information that could be easily imported to objects that have name
# and parameters (for example nodes of tree, or vertices of graph). Note is an
# information that has to be put into parameters if given conditions are met.
#
# Every note is defined by the name of object that it applies to ("name"),
# list of parameters to match ("mtch", this is condition of note), list of
# parameters to update ("updt"). Notes are grouped by name of the object. Every
# note also has its own list of parameters ("parm"), where information about
# note itself is kept. Here is an example of three notes:
#
#	(
#		Alfa (
#			(Order ZM_123 Date "2010-12-21") (About "important" Handling "by temperature") (Who Kowalski When "2010-04-12") 
#			(Order ZM_189 Date "2011-01-13") (Price +4.45) (Who Kowalski State "Disabled")
#		) 
#		Beta (
#			(Order ZM_123 Date "2010-23-13") (About "none of them") ()
#		)
#		Alfa (
#			() () (Info "more notes for Alfa")
#		)		
#	) .
#
# First two notes are applied to objects, that have name "Alfa", and the
# third note is applied to objects of name "Beta". First note is applied
# only when "Order" in object "Alfa" is "ZM_123", and "Date" is exactly
# "2010-12-21". If these conditions are met parameter "About" is set to text
# "important" and parameter "Handling" is set to "by temperature". Note was
# generated by "Kowalski" on "2010-04-12".
#
# To ease management of notes every note has one more field -- "used". This
# is boolean value that tells if note was applied. This field is initialized
# to false when note is created, and is changed to true if note is applied.
#
# Functions below keep information about notes in one object. Every property
# of that object is the first element of linked list that describes notes
# for given name. Every element of such list has parameters "mtch", "updt",
# "parm", "used" and "next". Notes for given name can be defined in many
# parenthesis -- they don't have to be grouped in one place.

# Read and write notes.
* note_read () 
	(do 
		(if (is lpar (read)) 
			(void)
			(do (info "Can not compute \"note_read\" call. Parenthesis was expected.") (exit (no)))
		)
		(note_read_name (new) (new) (do (skip) (read)))
	)
	* note_read_name (f l d) 
		# "f" -- object that keeps index to first note of given name;
		# "l" -- object that keeps index to last note of given name;
		# "d" -- data read from standard input
		(if (is rpar (d))
			(f)
			(do 
				(if (is name (d)) 
					(void)
					(do (info "Can not compute \"note_read\" call. Name of note was expected.") (exit (no)))
				)
				(if (def (f) (d))
					(void)
					(ins (f) (d) (void))
				)
				(skip) 
				(if (is lpar (read)) 
					(void)
					(do (info "Can not compute \"note_read\" call. Parenthesis was expected.") (exit (no)))
				)
				(note_read_data (f) (l) (d) (do (skip) (read))) 
				(note_read_name (f) (l) (do (skip) (read)))
			)
		)
	* note_read_data (f l n d)
		# "f" -- object that keeps index to first note of given name; 
		# "l" -- object that keeps index to last note of given name; 
		# "n" -- name of note that is currently processed; "d" -- data 
		# read from standard input 
		(if (is rpar (d)) 
			(void) 
			(as 
				e (new) 
				(do 
					(back (d))
					(ins (e) mtch (do (skip) (parm_read)))
					(ins (e) updt (do (skip) (parm_read)))
					(ins (e) parm (do (skip) (parm_read)))
					(ins (e) used (no))
					(ins (e) next (void))
					(if (is void (get (f) (n)))
						(do 
							(set (f) (n) (e))
							(ins (l) (n) (e))
						)
						(do 
							(set (get (l) (n)) next (e))
							(set (l) (n) (e))
						)
					)
					(note_read_data (f) (l) (n) (do (skip) (read)))
				)
			)
		)
* note_wrte (n)
	(do 
		(wrte (lpar))
		(wrte (line))
		(note_wrte_name (frst (n)))
		(n)
	)
	* note_wrte_name (e)
		(if (is void (e))
			(wrte (rpar))
			(do 
				(wrte (tabu))
				(wrte (name (e)))
				(wrte (spac))
				(wrte (lpar))
				(wrte (line))
				(note_wrte_data (vlue (e)))
				(wrte (line))
				(note_wrte_name (next (e)))
			)
		)
	* note_wrte_data (e) 
		(if (is void (e))
			(do (wrte (tabu)) (wrte (rpar)))
			(do 
				(wrte (tabu))
				(wrte (tabu))
				(parm_wrte (get (e) mtch))
				(wrte (spac))
				(parm_wrte (get (e) updt))
				(wrte (spac))
				(parm_wrte (get (e) parm))
				(wrte (line))
				(note_wrte_data (get (e) next))
			)
		)
* note_pass () 
	(do 
		(if (is lpar (read)) 
			(do (wrte (lpar)) (wrte (line)))
			(do (info "Can not compute \"note_pass\" call. Parenthesis was expected.") (exit (no)))
		)
		(note_pass_name (new) (new) (do (skip) (read)))
	)
	* note_pass_name (f l d) 
		# "f" -- object that keeps index to first note of given name;
		# "l" -- object that keeps index to last note of given name;
		# "d" -- data read from standard input
		(if (is rpar (d))
			(do (wrte (rpar)) (f))
			(do 
				(if (is name (d)) 
					(do (wrte (tabu)) (wrte (d)) (wrte (spac)))
					(do (info "Can not compute \"note_pass\" call. Name of note was expected.") (exit (no)))
				)
				(if (def (f) (d))
					(void)
					(ins (f) (d) (void))
				)
				(skip) 
				(if (is lpar (read)) 
					(do (wrte (lpar)) (wrte (line)))
					(do (info "Can not compute \"note_pass\" call. Parenthesis was expected.") (exit (no)))
				)
				(note_pass_data (f) (l) (d) (do (skip) (read))) 
				(note_pass_name (f) (l) (do (skip) (read)))
			)
		)
	* note_pass_data (f l n d)
		# "f" -- object that keeps index to first note of given name; 
		# "l" -- object that keeps index to last note of given name; 
		# "n" -- name of note that is currently processed; "d" -- data 
		# read from standard input 
		(if (is rpar (d)) 
			(do (wrte (tabu)) (wrte (rpar)) (wrte (line)))
			(as 
				e (new) 
				(do 
					(back (d))
					(wrte (tabu)) (wrte (tabu))
					(ins (e) mtch (do (skip) (parm_pass))) (wrte (spac))
					(ins (e) updt (do (skip) (parm_pass))) (wrte (spac))
					(ins (e) parm (do (skip) (parm_pass))) (wrte (line))
					(ins (e) used (no))
					(ins (e) next (void))
					(if (is void (get (f) (n)))
						(do 
							(set (f) (n) (e))
							(ins (l) (n) (e))
						)
						(do 
							(set (get (l) (n)) next (e))
							(set (l) (n) (e))
						)
					)
					(note_pass_data (f) (l) (n) (do (skip) (read)))
				)
			)
		)

# Apply notes "n" to object, where name of object is "a" and parameters
# of that object are "p".
* note_aply (n a p) 
	(if (def (n) (a))
		(note_aply_loop (get (n) (a)) (p))
		(void)
	)
	* note_aply_loop (n p) 
		(if (is void (n))
			(void) 
			(do 
				(if (parm_mtch (p) (get (n) mtch))
					(do 
						(parm_updt (p) (get (n) updt))
						(set (n) used (yes))
					)
					(void)
				)
				(note_aply_loop (get (n) next) (p))
			)
		)

# Make new notes from notes "n" by selecting only those that have "used"
# same as "u". Result doesn't contain names that nave no notes inside.
* note_used (n u) 
	(as
		s (new) # selected notes
		(note_used_outr (s) (frst (n)) (u))
	)
	* note_used_outr (s a u) 
		(if (is void (a)) 
			(s) 
			(as
				i (note_used_innr (vlue (a)) (u))
				(do 
					(if (is void (i))
						(void)
						(ins (s) (name (a)) (i))
					)
					(note_used_outr (s) (next (a)) (u))
				)
			)
		)
	* note_used_innr (e u) 
		(if (is void (e)) 
			(void)
			(if (if (u) (get (e) used) (not (get (e) used)))
				(set (e) next (note_used_innr (get (e) next) (u)))
				(note_used_innr (get (e) next) (u))
			)
		)

