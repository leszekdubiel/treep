
# Check if text "v" can be safely converted to another type named "n". Check if
# text looks like a representation of number, name or date time. 
* like (n v) 
	(if (is name (n)) 
		(if 
			(same (n) numb) (like_numb (v))
			(same (n) name) (like_name (v))
			(same (n) time) (like_time (v))
			(do (info "Can not compute \"like\" call. Wrong name of type.") (exit (no)))
		)
		(do (info "Can not compute \"like\" call. Wrong type of parameter.") (exit (no)))
	)
	* like_numb (v)
		(if (is text (v))
			(if (gre (leng (v)) +20.0)
				(no)
				(do (ptrn "^(0\\.0|[-+]([1-9][0-9]*\\.(0|[0-9]*[1-9])|(0|[1-9][0-9]*)\\.[0-9]*[1-9]))$") (mtch (v)))
			)
			(do (info "Can not compute \"like\" call. Wrong type of parameter.") (exit (no)))
		)
	* like_name (v)
		(if (is text (v))
			(do (ptrn "^[A-Za-z](_?[A-Za-z0-9])*$") (mtch (v)))
			(do (info "Can not compute \"like\" call. Wrong type of parameter.") (exit (no)))
		)
	* like_time (v)
		(if (is text (v))
			(do (ptrn "^(((19(0[2-9]|[1-9][0-9])|20([012][0-9]|3[0-7]))-((0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-8])|(0[1,3-9]|1[0-2])-(29|30)|(0[13578]|1[02])-31)|(190[48]|(19[13579]|201)[26]|(19[2468]|20[02])[048]|203[26])-02-29) ([0-1][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9])$") (mtch (v)))
			(do (info "Can not compute \"like\" call. Wrong type of parameter.") (exit (no)))
		)

# Type name of given value. 
* type (v) 
	(if 
		(is void (v)) void
		(is spac (v)) spac
		(is tabu (v)) tabu
		(is line (v)) line
		(is lpar (v)) lpar
		(is rpar (v)) rpar
		(is numb (v)) numb
		(is name (v)) name
		(is text (v)) text
		(is bool (v)) bool
		(is node (v)) node
		(is tree (v)) tree
		(do (info "Can not compute \"type\" call. Wrong value.") (exit (no)))
	)

# Skips white characters from input and returns data that is immediately
# after white space (or "void" on end of file).
* skip ()
	(as
		d (read) 
		(if 
			(is spac (d)) (skip)
			(is tabu (d)) (skip)
			(is line (d)) (skip)
			(back (d))
		)
	)

# Writes indentation using "n" tabs.
* tabs (n) 
	(if (pos (n))
		(do 
			(wrte (tabu))
			(tabs (add -1.0 (n)))
		)
		(void)
	)

# Functions that extend treep functionality -- they allow more parameters
# than orignal functions (for example instead of "(add +1.0 (add +2.0 +3.0))"
# simply write "(add3 +1.0 +2.0 +3.0)".
* add3 (a1 a2 a3)
	(add (add (a1) (a2)) (a3))
* add4 (a1 a2 a3 a4)
	(add (add (add (a1) (a2)) (a3)) (a4))
* add5 (a1 a2 a3 a4 a5)
	(add (add (add (add (a1) (a2)) (a3)) (a4)) (a5))
* add6 (a1 a2 a3 a4 a5 a6)
	(add (add (add (add (add (a1) (a2)) (a3)) (a4)) (a5)) (a6))
* add7 (a1 a2 a3 a4 a5 a6 a7)
	(add (add (add (add (add (add (a1) (a2)) (a3)) (a4)) (a5)) (a6)) (a7))
* add8 (a1 a2 a3 a4 a5 a6 a7 a8)
	(add (add (add (add (add (add (add (a1) (a2)) (a3)) (a4)) (a5)) (a6)) (a7)) (a8))
* add9 (a1 a2 a3 a4 a5 a6 a7 a8 a9)
	(add (add (add (add (add (add (add (add (a1) (a2)) (a3)) (a4)) (a5)) (a6)) (a7)) (a8)) (a9))
* sub3 (a1 a2 a3)
	(sub (sub (a1) (a2)) (a3))
* sub4 (a1 a2 a3 a4)
	(sub (sub (sub (a1) (a2)) (a3)) (a4))
* sub5 (a1 a2 a3 a4 a5)
	(sub (sub (sub (sub (a1) (a2)) (a3)) (a4)) (a5))
* sub6 (a1 a2 a3 a4 a5 a6)
	(sub (sub (sub (sub (sub (a1) (a2)) (a3)) (a4)) (a5)) (a6))
* sub7 (a1 a2 a3 a4 a5 a6 a7)
	(sub (sub (sub (sub (sub (sub (a1) (a2)) (a3)) (a4)) (a5)) (a6)) (a7))
* sub8 (a1 a2 a3 a4 a5 a6 a7 a8)
	(sub (sub (sub (sub (sub (sub (sub (a1) (a2)) (a3)) (a4)) (a5)) (a6)) (a7)) (a8))
* sub9 (a1 a2 a3 a4 a5 a6 a7 a8 a9)
	(sub (sub (sub (sub (sub (sub (sub (sub (a1) (a2)) (a3)) (a4)) (a5)) (a6)) (a7)) (a8)) (a9))
* mul3 (a1 a2 a3)
	(mul (mul (a1) (a2)) (a3))
* mul4 (a1 a2 a3 a4)
	(mul (mul (mul (a1) (a2)) (a3)) (a4))
* mul5 (a1 a2 a3 a4 a5)
	(mul (mul (mul (mul (a1) (a2)) (a3)) (a4)) (a5))
* mul6 (a1 a2 a3 a4 a5 a6)
	(mul (mul (mul (mul (mul (a1) (a2)) (a3)) (a4)) (a5)) (a6))
* mul7 (a1 a2 a3 a4 a5 a6 a7)
	(mul (mul (mul (mul (mul (mul (a1) (a2)) (a3)) (a4)) (a5)) (a6)) (a7))
* mul8 (a1 a2 a3 a4 a5 a6 a7 a8)
	(mul (mul (mul (mul (mul (mul (mul (a1) (a2)) (a3)) (a4)) (a5)) (a6)) (a7)) (a8))
* mul9 (a1 a2 a3 a4 a5 a6 a7 a8 a9)
	(mul (mul (mul (mul (mul (mul (mul (mul (a1) (a2)) (a3)) (a4)) (a5)) (a6)) (a7)) (a8)) (a9))
* div3 (a1 a2 a3)
	(div (div (a1) (a2)) (a3))
* div4 (a1 a2 a3 a4)
	(div (div (div (a1) (a2)) (a3)) (a4))
* div5 (a1 a2 a3 a4 a5)
	(div (div (div (div (a1) (a2)) (a3)) (a4)) (a5))
* div6 (a1 a2 a3 a4 a5 a6)
	(div (div (div (div (div (a1) (a2)) (a3)) (a4)) (a5)) (a6))
* div7 (a1 a2 a3 a4 a5 a6 a7)
	(div (div (div (div (div (div (a1) (a2)) (a3)) (a4)) (a5)) (a6)) (a7))
* div8 (a1 a2 a3 a4 a5 a6 a7 a8)
	(div (div (div (div (div (div (div (a1) (a2)) (a3)) (a4)) (a5)) (a6)) (a7)) (a8))
* div9 (a1 a2 a3 a4 a5 a6 a7 a8 a9)
	(div (div (div (div (div (div (div (div (a1) (a2)) (a3)) (a4)) (a5)) (a6)) (a7)) (a8)) (a9))
* min3 (a1 a2 a3)
	(min (min (a1) (a2)) (a3))
* min4 (a1 a2 a3 a4)
	(min (min (min (a1) (a2)) (a3)) (a4))
* min5 (a1 a2 a3 a4 a5)
	(min (min (min (min (a1) (a2)) (a3)) (a4)) (a5))
* min6 (a1 a2 a3 a4 a5 a6)
	(min (min (min (min (min (a1) (a2)) (a3)) (a4)) (a5)) (a6))
* min7 (a1 a2 a3 a4 a5 a6 a7)
	(min (min (min (min (min (min (a1) (a2)) (a3)) (a4)) (a5)) (a6)) (a7))
* min8 (a1 a2 a3 a4 a5 a6 a7 a8)
	(min (min (min (min (min (min (min (a1) (a2)) (a3)) (a4)) (a5)) (a6)) (a7)) (a8))
* min9 (a1 a2 a3 a4 a5 a6 a7 a8 a9)
	(min (min (min (min (min (min (min (min (a1) (a2)) (a3)) (a4)) (a5)) (a6)) (a7)) (a8)) (a9))
* max3 (a1 a2 a3)
	(max (max (a1) (a2)) (a3))
* max4 (a1 a2 a3 a4)
	(max (max (max (a1) (a2)) (a3)) (a4))
* max5 (a1 a2 a3 a4 a5)
	(max (max (max (max (a1) (a2)) (a3)) (a4)) (a5))
* max6 (a1 a2 a3 a4 a5 a6)
	(max (max (max (max (max (a1) (a2)) (a3)) (a4)) (a5)) (a6))
* max7 (a1 a2 a3 a4 a5 a6 a7)
	(max (max (max (max (max (max (a1) (a2)) (a3)) (a4)) (a5)) (a6)) (a7))
* max8 (a1 a2 a3 a4 a5 a6 a7 a8)
	(max (max (max (max (max (max (max (a1) (a2)) (a3)) (a4)) (a5)) (a6)) (a7)) (a8))
* max9 (a1 a2 a3 a4 a5 a6 a7 a8 a9)
	(max (max (max (max (max (max (max (max (a1) (a2)) (a3)) (a4)) (a5)) (a6)) (a7)) (a8)) (a9))
* equ3 (a1 a2 a3)
	(and (equ (a1) (a2)) (and (equ (a2) (a3)) (equ (a2) (a3))))
* equ4 (a1 a2 a3 a4)
	(and (equ (a1) (a2)) (and (equ (a2) (a3)) (and (equ (a3) (a4)) (equ (a3) (a4)))))
* equ5 (a1 a2 a3 a4 a5)
	(and (equ (a1) (a2)) (and (equ (a2) (a3)) (and (equ (a3) (a4)) (and (equ (a4) (a5)) (equ (a4) (a5))))))
* equ6 (a1 a2 a3 a4 a5 a6)
	(and (equ (a1) (a2)) (and (equ (a2) (a3)) (and (equ (a3) (a4)) (and (equ (a4) (a5)) (and (equ (a5) (a6)) (equ (a5) (a6)))))))
* equ7 (a1 a2 a3 a4 a5 a6 a7)
	(and (equ (a1) (a2)) (and (equ (a2) (a3)) (and (equ (a3) (a4)) (and (equ (a4) (a5)) (and (equ (a5) (a6)) (and (equ (a6) (a7)) (equ (a6) (a7))))))))
* equ8 (a1 a2 a3 a4 a5 a6 a7 a8)
	(and (equ (a1) (a2)) (and (equ (a2) (a3)) (and (equ (a3) (a4)) (and (equ (a4) (a5)) (and (equ (a5) (a6)) (and (equ (a6) (a7)) (and (equ (a7) (a8)) (equ (a7) (a8)))))))))
* equ9 (a1 a2 a3 a4 a5 a6 a7 a8 a9)
	(and (equ (a1) (a2)) (and (equ (a2) (a3)) (and (equ (a3) (a4)) (and (equ (a4) (a5)) (and (equ (a5) (a6)) (and (equ (a6) (a7)) (and (equ (a7) (a8)) (and (equ (a8) (a9)) (equ (a8) (a9))))))))))
* and3 (a1 a2 a3)
	(and (and (a1) (a2)) (a3))
* and4 (a1 a2 a3 a4)
	(and (and (and (a1) (a2)) (a3)) (a4))
* and5 (a1 a2 a3 a4 a5)
	(and (and (and (and (a1) (a2)) (a3)) (a4)) (a5))
* and6 (a1 a2 a3 a4 a5 a6)
	(and (and (and (and (and (a1) (a2)) (a3)) (a4)) (a5)) (a6))
* and7 (a1 a2 a3 a4 a5 a6 a7)
	(and (and (and (and (and (and (a1) (a2)) (a3)) (a4)) (a5)) (a6)) (a7))
* and8 (a1 a2 a3 a4 a5 a6 a7 a8)
	(and (and (and (and (and (and (and (a1) (a2)) (a3)) (a4)) (a5)) (a6)) (a7)) (a8))
* and9 (a1 a2 a3 a4 a5 a6 a7 a8 a9)
	(and (and (and (and (and (and (and (and (a1) (a2)) (a3)) (a4)) (a5)) (a6)) (a7)) (a8)) (a9))
* or3 (a1 a2 a3)
	(or (or (a1) (a2)) (a3))
* or4 (a1 a2 a3 a4)
	(or (or (or (a1) (a2)) (a3)) (a4))
* or5 (a1 a2 a3 a4 a5)
	(or (or (or (or (a1) (a2)) (a3)) (a4)) (a5))
* or6 (a1 a2 a3 a4 a5 a6)
	(or (or (or (or (or (a1) (a2)) (a3)) (a4)) (a5)) (a6))
* or7 (a1 a2 a3 a4 a5 a6 a7)
	(or (or (or (or (or (or (a1) (a2)) (a3)) (a4)) (a5)) (a6)) (a7))
* or8 (a1 a2 a3 a4 a5 a6 a7 a8)
	(or (or (or (or (or (or (or (a1) (a2)) (a3)) (a4)) (a5)) (a6)) (a7)) (a8))
* or9 (a1 a2 a3 a4 a5 a6 a7 a8 a9)
	(or (or (or (or (or (or (or (or (a1) (a2)) (a3)) (a4)) (a5)) (a6)) (a7)) (a8)) (a9))
* same3 (a1 a2 a3)
	(and (same (a1) (a2)) (and (same (a2) (a3)) (same (a2) (a3))))
* same4 (a1 a2 a3 a4)
	(and (same (a1) (a2)) (and (same (a2) (a3)) (and (same (a3) (a4)) (same (a3) (a4)))))
* same5 (a1 a2 a3 a4 a5)
	(and (same (a1) (a2)) (and (same (a2) (a3)) (and (same (a3) (a4)) (and (same (a4) (a5)) (same (a4) (a5))))))
* same6 (a1 a2 a3 a4 a5 a6)
	(and (same (a1) (a2)) (and (same (a2) (a3)) (and (same (a3) (a4)) (and (same (a4) (a5)) (and (same (a5) (a6)) (same (a5) (a6)))))))
* same7 (a1 a2 a3 a4 a5 a6 a7)
	(and (same (a1) (a2)) (and (same (a2) (a3)) (and (same (a3) (a4)) (and (same (a4) (a5)) (and (same (a5) (a6)) (and (same (a6) (a7)) (same (a6) (a7))))))))
* same8 (a1 a2 a3 a4 a5 a6 a7 a8)
	(and (same (a1) (a2)) (and (same (a2) (a3)) (and (same (a3) (a4)) (and (same (a4) (a5)) (and (same (a5) (a6)) (and (same (a6) (a7)) (and (same (a7) (a8)) (same (a7) (a8)))))))))
* same9 (a1 a2 a3 a4 a5 a6 a7 a8 a9)
	(and (same (a1) (a2)) (and (same (a2) (a3)) (and (same (a3) (a4)) (and (same (a4) (a5)) (and (same (a5) (a6)) (and (same (a6) (a7)) (and (same (a7) (a8)) (and (same (a8) (a9)) (same (a8) (a9))))))))))
* join3 (a1 a2 a3)
	(join (join (a1) (a2)) (a3))
* join4 (a1 a2 a3 a4)
	(join (join (join (a1) (a2)) (a3)) (a4))
* join5 (a1 a2 a3 a4 a5)
	(join (join (join (join (a1) (a2)) (a3)) (a4)) (a5))
* join6 (a1 a2 a3 a4 a5 a6)
	(join (join (join (join (join (a1) (a2)) (a3)) (a4)) (a5)) (a6))
* join7 (a1 a2 a3 a4 a5 a6 a7)
	(join (join (join (join (join (join (a1) (a2)) (a3)) (a4)) (a5)) (a6)) (a7))
* join8 (a1 a2 a3 a4 a5 a6 a7 a8)
	(join (join (join (join (join (join (join (a1) (a2)) (a3)) (a4)) (a5)) (a6)) (a7)) (a8))
* join9 (a1 a2 a3 a4 a5 a6 a7 a8 a9)
	(join (join (join (join (join (join (join (join (a1) (a2)) (a3)) (a4)) (a5)) (a6)) (a7)) (a8)) (a9))

